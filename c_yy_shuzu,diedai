#define _CRT_SECURE_NO_WARNINGS 1

//数组
#include<stdio.h>
#include<string.h>


//int main()
//
//{
//	int arr[] = { 1, 2, 3, 4, 5, 6 };
//	printf("%d\n", sizeof(arr));
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//sizeof(数组名)  数组名表示整个数组，sizeof(数组名)计算的整个数组所占空间大小，单位为字节  
//	//&数组名，数组代表zheng个数组，&数组名，取出整个元素地址
//	printf("%p\n", arr);//首元素地址
//	printf("%p\n", &arr[0]);//首元素地址
//	printf("%d\n", *arr);//首元素值
//	return 0;
//}
////冒泡排序  ：10 9 8 7 6 5 4 3 2 1  变成升序
///////////////9 10 8 7...  两两比较
///////////////9 8 7.............10// 完成一趟冒泡排序
///////////直到1 2 3 4 5 6 7 8 9 10//10个元素  9趟冒泡排序
//
//void bubble_sort(int arr[],int sz)
//{
//	int i = 0;
//		for (i = 0; i < sz - 1; i++)
//	{
//			int flag = 1;//假设这一趟的排序已有序
//			//每一趟冒泡排序
//			int j = 0;
//			for (j = 0; j < sz-1-i; j++)
//			{
//				if (arr[j]>arr[j + 1])
//				{
//					int tmp = arr[j];
//					arr[j] = arr[j + 1];
//					arr[j + 1] = tmp;
//					flag = 0;//不完全有序
//				}
//			}
//			if (flag == 1)//如果两两比较没有交换数字，说明已经完成升序
//				          //flag=1 跳出循环（提高效率）
//			{
//				break;
//			}
//	}
//}
//
//int main()
//{
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);//算数组中元素的个数
//	bubble_sort(arr,sz);//arr传递的是首元素的地址  &arr[0]
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}


////打印数组中原属的地址  连续存放
//int main()
//{
//	int arr[3][4] = { { 1, 2, 3, }, { 4, 5 } };//3行4列
//	//3 和 4， 列下标 4 不可以省略
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 4; j++)
//		{
//			printf("&arr[%d][%d]=%p  ",i,j, &arr[i][j]);
//		}
//		printf("\n");
//	}
//	return 0;
//}

//int main()
//{
//	int arr[3][4] = { { 1, 2, 3, },{ 4, 5 } };//3行4列
//	//3 和 4， 列下标 4 不可以省略
//	int i = 0;
//	for(i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 4; j++)
//		{
//			printf("%d ", arr[i][j]);
//		}
//		  printf("\n");
//	}
//	return 0;
//}


//int main()
//{
//	char arr[] = {1,2,3,4,5,6,7,8,9,10};
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	for (i = 0; i < sz; i++)
//	{
//		printf("&arr[%d]=%p\n", i, &arr[i]);
//	}
//	return 0;
//}


//
//int main()
//{
//	char arr1[] = "abc";
//	char arr2[] = { 'a', 'b', 'c' };
//	printf("%d\n", sizeof(arr1));//4//4个空间
//	printf("%d\n", sizeof(arr2));//3
//	printf("%d\n", strlen(arr1));//3
//	printf("%d\n", strlen(arr2));//15  随机值
//	return 0;
//}

//int main()
//{
//	char arr[] = "abcdef";
//	printf("%d\n", sizeof(arr));//计算arr所占空间的大小 算\0  共有7空间
//	printf("%d\n", strlen(arr));//计算arr中字符串长度   不算\0 共有6个元素
//}



//                递归     &&    迭代

//递归的两个必要条件
//1.存在限制条件，满足条件将不再继续
//2.每次递归调用后越来越接近限制条件
//#include<stdio.h>
//#include<string.h>
//#include"all.h"


//斐波那契数列
//1 1 2 3 5 8 13 21
//方法一 递归方法（速度慢）
//int fib(int a)
//{
//	if (a)
//	if (a < 2)
//	{
//		return 1;
//	}
//	else
//	{
//		return  fib(a - 1)+fib(a - 2);
//	}
//}

////方法二  （速度快）
//int fib(int m)
//{
//	int a = 1;
//	int b = 1;
//	int c = 1;
//	while (m > 2)
//	{
//		c = a + b;
//		a = b;
//		b = c;
//		m--;
//	}
//	return c;
//}
//int main()
//{
//	int n = 0;
//	int ret = 0;
//	scanf("%d", &n);
//	ret = fib(n);
//	printf("ret=%d\n", ret);
//	return 0;
//}


//int fac1(int a)
//{
//	int i = 0;
//	int ret = 1;
//	for (i = 0; i <= n; i++)
//	{
//		ret *= i;
//	}
//	return ret;
//}
////递归的方法求阶乘
//int fac(int a)
//{
//	if (a <= 1)
//		return 1;
//	else
//		return a*fac(a - 1);
//}
//
//int main()
//{
//	//求n的阶乘
//
//	int n = 0;
//	int ret = 0;
//	scanf("%d", &n);
//	//方法一  ret=fac1(n);
//	//printf("%d\n",ret);
//	//方法二 递归方法
//	ret = fac(n);//循环方式
//	printf("%d\n", ret);
//	return 0;
//}




////递归的方法
////my_strlen("bit");
////1 + my_strlen("it");
////1 + 1 + my_strlen("t");
////1 + 1 + 1 + 0;
////3
//int my_strlen(char* str)//str 存的是第一个字符的地址
//{
//	if (*str != '\0')
//	{
//		return 1 + my_strlen(str + 1);
//	}
//	else
//	return 0;
//}
//int main()
//{
//	char arr[] = "bit";
//	int len1 = strlen(arr);//求字符串的长度
//	printf("len1=%d\n", len1);
//	int len2 = my_strlen(arr);//arr是数组，数组传参，传过去的不是数组的值，而是第一个数的地址
//	printf("len2=%d\n", len2);
//	return 0;
//}

////输入1234
////输出1 2 3 4
//void print(int n)
//{
//	if (n > 9)
//	{
//		print(n / 10);//函数调用函数
//	}
//	printf("%d", n % 10);
//}
//int main()
//{
//	unsigned int num = 0;
//	scanf("%d", &num);
//	//递归
//	print(num);
//	return 0;
//}


//最简单的递归
//int main()
//{
//	printf("sfs\n");
//	main(); 
//	return 0;
//}
