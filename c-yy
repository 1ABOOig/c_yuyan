#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<Windows.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>

int main()
{
	char input[20] = { 0 };
	//shutdown -s -t 60(60s后关机)
	//system()- 执行系统命令
	system("shutdown -s -t 60");
	while (1){
		printf("请注意，你的电脑在一分钟后关机，如果输入：我是猪，将取消关机");
		scanf("%s", input);
		if (strcmp(input, "我是猪") == 0)
		{
			system("shutdown -a");
			break;
		}
	}
	return 0;
}

//
//goto 语句
//int main()
//{
//again:
//	printf("hhh\n");
//	goto again;//跳到again处 
//	return 0;
//}

int main()
//{
//	char input[20] = { 0 };
//	//shutdown -s -t 60(60s后关机)
//	//system()- 执行系统命令
//	system("shutdown -s -t 60");
//	again:
//	printf("请注意，你的电脑在一分钟后关机，如果输入：我是猪，将取消关机");
//	scanf("%s", input);
//	if (strcmp(input, "我是猪") == 0)
//	{
//		system("shutdown -a");
//	}
//	else{
//		goto again;
//	}
//	return 0;
//}

//猜数字游戏
//
//void menu()
//{
//	printf("**************\n");
//	printf("**************\n");
//	printf("**************\n ");
//}
//void game()
//{
//	int guess = 0;
//	int ret = 0;
//	//拿时间戳设置随机数的起点
//	//time_t	
//	ret = rand()%100+1;//1-100随机生成数字
//	while (1)
//	{
//		printf("猜数字");
//		scanf("%d", &guess);
//		if (guess > ret)
//		{
//			printf("猜大了\n");
//		}
//		else if (guess < ret)
//		{
//			printf("猜小了\n");
//		}
//		else 
//		{
//			printf("猜对了\n");
//			break;
//		}
//	}
//}
//int main()
//{
//	srand((unsigned int)time(NULL));
//
//	int input = 0;
//	do
//	{
//		menu();
//		printf("是否还想再玩（1\\0）:");
//		scanf("%d", &input);
//		switch (input)
//		{case 1:
//			game();//猜数字游戏
//			break;
//		case 0:
//			printf("退出游戏\n");
//			break;
//		default:
//			printf("选择错误\n");
//		}
//	} while (input);
//	return 0;
//}


////9*9乘法表
//int main()
//{
//	int i = 0, j = 0;
//	for (i = 1; i < 10;i++){
//		j=1;
//	for (j = 1; j <= i; j++)
//	{
//		printf("%d*%d=%-2d  ", i, j, i*j);
//		if (j == i)
//		{
//			printf("\n");
//		}}
//	}
//	return 0;
//}

////找出一个数组中的最大值
//int main()
//{
//	//int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int arr[] = { -1,-2, -3, -4, -5, -6, -7, -8, -9, -10 };
//	int i = 1,max=arr[0];
//	int  sz = sizeof(arr) / sizeof(arr[0]);
//	for (i = 1; i <= sz; i++)
//	{
//		if (arr[i] > max)
//			max = arr[i];
//	}
//	printf("最大值%d\n", max);
//	return 0;
//}


//
////求1/1-1/2...-1/100的和
//int main()
//{
//	int i = 0;
//	double sum = 0;
//	int flag = 1;
//	for (i = 1; i <= 100; i++)
//	{
//		sum += flag*1.0 / i;
//		flag = -flag;
//	}
//	printf("%lf\n", sum);
//	return 0;
//}

////求1/1+1/2..1/100的和
//int main()
//{
//	int i = 0;
//	double sum = 0;
//	for (i = 1; i <= 100; i++)
//	{
//		sum += 1.0 / i;
//	}
//	printf("%lf\n", sum);
//	return 0;
//}

////1-100中9的个数
//int main()
//{
//	int i = 0;
//	int count = 0;
//	for (i = 1; i <= 100; i++)
//	{
//		if (i % 10 == 9)
//			count++;
//		if (i / 10 == 9)//如果此处是else if 99 在上上面走完将不会在走此处
//			count++;
//	}
//	printf("%d", count);
//	return 0;
//}


//素数100-200内
//int main()
//{
//	int i = 0;
//	for (i = 100; i <= 200; i++)
//	{
//		//判断i是否为素数
//		//素数判断规则
//		//1
//		int j = 0;
//		for (j = 2; j <=sqrt(i); j++);
//		{
//			if (i%j == 0)
//			{
//				break;
//			}
//		}
//		if (j >sqrt(i))
//		{
//			printf("%d ", i);
//		}
//	}
//	return 0;
//}


//int main()
//{
//	int i = 0;
//	for (i = 100; i <= 200; i++)
//	{
//		//判断i是否为素数
//		//素数判断规则
//		//1
//		int j = 0;
//		for (j = 2; j < i; j++);
//		{
//			if (i%j == 0)
//			{
//				break;
//			}
//		}
//		if (j == i)
//		{
//			printf("%d ", i);
//		}
//	}
//	return 0;
//}

//找出1000-2000闰年
//int main()
//{
//	int count = 0;
//	int year = 0;
//	for (year = 1000; year <= 2000; year++)
//	{   //判断是否是闰年
//		//1.能被4整除且不能被100整除是闰年
//		//2.能被400整除是闰年
//		if (year % 4 == 0 && year % 100 != 0)//if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
//		{
//			printf("%d\n", year);
//			count++;
//		}
//		else if (year % 400 ==0)
//		{
//			printf("%d\n", year);
//			count++;
//		}
//	}
//	printf("%d\n", count);
//	return 0;
//}

//从大到小排序
//int main()
//{
//	int a = 0, b = 0, c = 0;
//	scanf("%d%d%d", &a, &b, &c);
//	if (a < b)
//	{
//		int tmp = a;
//		a = b;
//		b = tmp;
//	}
//	if (a < c)
//	{
//		int tmp = a;
//		a = c;
//		c = tmp;
//	}
//	if (b < c)
//	{
//		int tmp = b;
//		b = c;
//		c = tmp;
//	}
//	printf("%d%d%d", a, b, c);
//	return 0;
//}


//int mian()
//{
//	int i = 0;
//	char password[20] = { 0 };
//
//	for (i = 0; i < 3; i++)
//	{
//		printf("请输入密码:");
//		scanf("%s", &password);
//		if (password == "123456")
//		{
//			printf("登陆成功\n");
//			break;
//		}
//	}
//	if (i == 3)
//		printf("三次密码错误")
//		return 0;
//}

//int main()
//{
//	char arr1[] = "welcome to bit!!!!!!";
//	char arr2[] = "####################";
//	int left = 0;
//	int right = strlen(arr1)-1;//strlen有多少个元素
//	while (left<=right)
//	{
//
//		arr2[left] = arr1[left];
//		arr2[right] = arr1[right];
//		printf("%s\n", arr2);
//		//休息一秒
//		Sleep(1000);
//		system("cls");//执行系统命令的一个函数cls  清空屏幕
//		left++;
//		right--;
//	}
//	printf("%s\n", arr2);
//	return 0;
//}


// 在一个数组中找到一个数  方法一 ：一个一个找  n次
//int main()
//{
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int k = 7;
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);//此数组中有多少个数
//	for (i = 0; i < sz; i++)
//	{
//		if (k == arr[i])
//		{
//			printf("找到了，下表为%d\n", i);
//		}
//	}
//	if (i == sz)
//	{
//		printf("找不到");
//	}
//
//	return 0;
//}

//方法二：二分查找法（一半一半找）只需要查找log2 n次
//int main()
//{
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int k = 7;
//
//	int sz = sizeof(arr) / sizeof(arr[0]);//此数组中有多少个数
//	int left = 0;//左下标
//	int right = sz - 1;//右下标
//	int mid = (left + right) / 2;
//	while (left<=right)
//	{
//		if (arr[mid] > k)
//		{
//			right = mid - 1;
//		}
//		else if (arr[mid] < k)
//		{
//			left = mid + 1;
//		}
//		else
//		{
//			printf("找到了下表%d\n", mid);
//			break;
//		}
//	}
//	if (left>right)
//	{
//		printf("找不到\n");
//	}
//	return 0;
//}




//
//int main()
//{
//	int he = 0 ;
//	int i,sum=1;
//	for (i = 1; i <= n; i++)
//		
//		{
//			sum = i*sum;
//			he = sum + he;
//	}
//	/*for(n=1;n<=10;n++)
//	{
//	ret=1;
//	for(i=1;i<n;i++)
//	{ret=ret*i;}
//	sum=sum+ret;
//	}
//	*/
//	printf("%d,%d\n", sum, he);
//	return 0;
//}




//do while()
//int main()
//{
//	int i = 1;
//	do{
//		printf("%d\n", i);
//		i++;
//	} while (i < 20);
//	return 0;
//}

//int main()
//{
//	int i, k;
//	for (i = 0, k = 0; k = 1; k++, i++)//死循环
//	{
//		printf("sdfa\n");
//		k++;
//	}
//	return 0;
//}
//for (i = 0, k = 0; k = 0;i++,k++)//循环0次  0为假


////for里面的可以省略  但不建议   下只能出来10个JJJ  而不是100个
//int main()
//{
//	int i = 0;
//	int j = 0;
//	for (; i < 10; i++)
//	{
//		for (; j < 10; j++)//循环10次后  j变为10
//		{
//			printf("JJJ\n");
//		}
//	}
//	return 0;
//}

//int main()
//{
//	for (;;)//for循环判断部分省略  则位恒位真
//	{
//		printf("好好学习\n");
//	}
//	return 0;
//}

//int main()
//{
//	int i;
//	for (i = 1; i <= 10; i++)
//	{
//		if (i == 5)
//			continue;//break;
//		printf("%d\n", i);
//	}
//	return 0;
//}
//

//int main()
//{
//	int ret = 0;
//	int ch = 0;
//	char password[20] = { 0 };
//	printf("请输入密码");
//	scanf("%s", password);
//	while ((ch = getchar()) != '\n')
//	{
//		;
//	}
//	printf("请输入(N/Y)");
//	ret = getchar();
//	if (ret == 'Y')
//		printf("确认输入\n");
//	else
//		printf("放弃输入\n");
//	return 0;
//}



int main()
{
	int ch = getchar();
	putchar(ch);
	printf("%c\n", ch);
	return 0;
}

//int main()
//{
//	int i;
//	while (i < 10)
//	{
//		if (i == 5)
//			continue;//到五的时候 进入死循环  i一直是5  continue终止本次循环
//		printf("hjk\n");
//			i++;
//	}
//}


//int main()
//{
//	int i = 0;
//	while (i <= 10){
//		printf("hhh\n");
//		i++;
//	}
//	return 0;
//}
//



//int main()
//{
//	int n = 1;
//	int m = 2;
//	switch (n)
//	{
//	case 1:m++;
//	case 2:n++; 
//	case 3:
//		switch (n)
//		{
//		case 1:n++;
//		case 2:m++; n++; break;
//		}
//	case 4:m++;
//		break;
//	default:break;
//	}
//	printf("m=%d,n=%d\n", m, n);
//	return 0;
//}


////switch用法
//int main()
//{
//	int day = 0;
//	scanf("%d", &day);
//	switch (day)
//	{
//	case 1:
//	case 2:
//	case 3:
//	case 4:
//	case 5:
//		printf("工作日\n"); break;
//	case 6:
//	case 7:
//		printf("休息日\n"); break;
//	default:printf("输入错误请输入1-7\n"); break;
//	}
//	return 0;
//}



//int main()
//{
//	int day = 0;
//	scanf("%d", &day);
//	switch (day)
//	{case 1:
//		printf("星期1\n"); break;
//	case 2:
//		printf("星期2\n"); break;
//	case 3:
//		printf("星期3\n"); break;
//	case 4:
//		printf("星期4\n"); break;
//	case 5:
//		printf("星期5\n"); break;
//	case 6:
//		printf("星期6\n"); break;
//	case 7:
//		printf("星期7\n"); break;
//	}
//	return 0;
//}




//输出1-100所有的奇数
//int main()
//{
//	int i;
//	
//	for (i = 0; i < 101; i++)
//	{
//		
//		if (i % 2)
//			printf("%d\n", i);
//	}
//	
//	return 0;
//}






//int main()
//{
//	int num = 4;
//	if (num = 5)//一个等号是赋值
//		printf("HHH\n");
//	return 0;
//}


//结构体  自己创作出来的类型
struct book
{
	char name[20];
	short price;
};//结束类型定义

int main()
{//利用结构体类型创造一个该类型的变量
	struct book b1 = { "c语言程序设计", 55 };
	struct book* pb = &b1;
	
	printf("%s\n", (*pb).name);
	printf("%d\n", (*pb).price);
	printf("%s\n", pb->name);
	printf("%d\n", pb->price);
	printf("书名：%s\n", b1.name);
	printf("价格：%d元\n", b1.price);
	b1.price = 15;
	strcpy(b1.name,"C++");//字符串拷贝
	printf("修改后的价格：%d元\n", b1.price);
	printf("修改后的书名：%s\n", b1.name);
	return 0;
}






//int main()
//{ 
//	char ch = 'w';
//	char* pc = &ch;
//	printf("%d\n", sizeof(pc));//4代表32位
//	return 0;
//
//}







//指针
//int main()
//{
//	int a = 10;
//	int* p = &a;
//	printf("%p\n", &a);
//	printf("%p\n", p);
//	*p = 20;
//	printf("a=%d\n", a);//a=20
//	return 0;
//}
//


