#define _CRT_SECURE_NO_WARNINGS 1
#define N_VALUES 5;
#include<stdio.h>
#include<Windows.h>


//指针数组
int main()
{
	int a = 10;
	int b = 20;
	int c = 30;
	int* arr2[3] = { &a, &b, &c };
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		printf("%d ", *(arr2[i]));
	}
	return 0;
}

//打印爱心
//int main()
//{
//	float x, y, a;
//	while (1)
//	{
//		for (y = 1.5f; y > -1.5f; y -= 0.1f)
//		{
//			for (x = -1.5f; x < 1.5f; x += .05f)
//			{
//				a = x*x + y*y - 1;
//				putchar(a*a*a - x*x*y*y*y < 0.0f ? 'x' : ' ');
//			}
//			Sleep(100);
//			putchar('\n');
//		}}
//		getchar();
//	
//	return 0;
//}
//int main()
//{
//	int arr[10] = { 0 };
//	printf("%p\n", arr);//地址-首元素的地址
//	printf("%p\n", arr+1);
//
//	printf("%p\n", &arr[0]);
//	printf("%p\n", &arr[0]+1);//同上
//	
//	printf("%p\n", &arr);
//	printf("%p\n", &arr+1);
//	//1.&arr -&数组名-数组名不是首元素地址，数组名表示整个数组  &数组名 取出整个数组地址
//	//2.sizeof(arr) sizeof(数组名) -数组名表示整个数组  计算整个数组的大小
//
//}

//int main()
//{
//	float values[N_VALUES];
//	float *vp;
//	for (vp = &values[N_VALUES]; vp > &values[0];)
//	{
//		*--p = 0;//将values中的值全变成零  
//	}
//}


////指针减指针求字符串个数
//int my_strlen(char* str)
//{
//	char* start = str;
//	char* end = str;
//	while (*end != '\0')
//	{
//		end++;
//	}
//	return end - start;
//}
//int main()
//
//{
//	char arr[] = "bit";//b i t \0
//	int len = my_strlen(arr);
//	printf("%d", len);
//	return 0;
//}
//
//int main()
//{
//	int arr[10] = { 1, 12, 3, 4, 35, 46, 572, 452, 452, 35};
//	printf("%d", &arr[9] - &arr[0]);//9
//	return 0;
//}


//int main()
//{
//	int arr[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int *p = &arr[9];
//	for (i = 0; i < 5; i++)
//	{
//		printf("%d ", *p);
//		p -= 2;
//	}
//	return 0;
//}



//int main()
//{
//	int a = 10;
//	int*pa = &a;
//	int* p = NULL;//当不知道给指针赋值什么时 用来初始化指针
//	
//}



//int main()
//{
//
//	int arr[10] = { 0 };
//	//int* p=arr;//数组名 首元素地址；
//	char*p = arr;
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*(p + i) = 1;
//	}
//
//	return 0;
//}

//#include<stdio.h>
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = b + a + 3;
//	printf("%d\n", c);
//
//	return 0;
//}

////结构体指针
//struct Stu
//{
//	char name[29];
//	int age;
//	char id[23];
//};
//int main()
//{
//	int a = 0;
//	struct Stu s1 = { "zhang", 29, "2202020" };
//	struct Stu* ps = &s1;
//	//结构体指针
//	 printf("%s\n", ps->name);
//	 
//	printf("%s\n", s1.name);
//	printf("%d\n", s1.age);
//	printf("%s\n", s1.id);
//
//
//	return 0;
//
//}

//逗号结果  算最后一个为结果


//int main()
//{
//
//	int a = 20;
//	int b = 203;
//	int max = 0;
//	//最大值
//	max = (a > b ? a : b);
//
//	//int a = 0;
//	//int b = 0;
//	//if (a > 5)
//	//	b = 3;
//	//else
//	//	b = -3;
//	////第二种方法
//	//b = (a > 5 ? 3 : -3);
//	//return 0;
//}

//int main()
//{
//	int i = 0, a = 1, b = 2, c = 3, d = 4;
//	i = a++||++b||d++;// ||运算  只要第一个为真 后面不在算
//	printf("%d,%d,%d,%d", a, b, c, d);//此时a++的结果为1  所以a2 b2 c3 d4;
//	return 0;
//}


//int main()
//{
//	int i = 0, a = 1, b = 2, c = 3, d = 4;
//	i = a++&&++b&&d++;//
//	printf("%d,%d,%d,%d", a, b, c, d);//此时a++的结果为1  所以a2 b3 c3 d4;
//	return 0;
//}


//
//int main()
//{
//	int i = 0, a = 0, b = 2, c = 3, d = 4;
//	i = a++&&++b&&d++;//a++=0  后面不在算  
//	printf("%d,%d,%d,%d", a, b, c, d);//此时a++的结果为1  所以a1b2c3d4;
//	return 0;
//}



//void test1(int arr[])
//{
//	printf("%d\n", sizeof(arr));//4
//}
//void test2(char ch[])
//{
//	printf("%d\n", sizeof(ch));//4
//}
//int main()
//{
//	int arr[10] = { 0 };
//	char ch[10] = { 0 };
//	printf("%d\n", sizeof(arr));//40
//	printf("%d\n", sizeof(ch));//10
//	test1(arr);
//	test2(ch);
//}



//++ --
//int main()
//{
//	int a = 10;
//	printf("%d\n", ++a);//前置++，先++，后使用
//	printf("%d\n", a++);//后置++，先使用，再++
//	printf("%d\n", a--);
//
//
//}
//int main()
//{
//	int a = (int)3.14;
//	return 0;
//}

//int main()
//{
//	//int a = 0;
//	//char b = 'w';
//	//int arr[10] = { 1 };
//	////sizeof计算的变量所占内存空间大小
//	//printf("%d\n", sizeof(a));
//	//printf("%d\n", sizeof(int));
//
//	//printf("%d\n", sizeof(b));
//	//printf("%d\n", sizeof(char));
//
//	//printf("%d\n", sizeof(arr));
//	//printf("%d\n", sizeof(int[10]));
//
//	short s = 0;
//	int a = 10;
//	printf("%d\n", sizeof(s = a + 5));//2
//	//sizeof()里面的表达式不参与计算
//	printf("%d\n", s);//0
//	//~按位取反
//	printf("%d\n", ~a);
//	a = a | (1 << 2);
//	printf("%d\n", a);
//	a = a&(~(1 << 2));
//	printf("%d\n", a);
//}

//int main()
//{
//	int a = 10;
//	int* p = &a;//取址操作符
//	*p = 20;//解引用操作符
//}

