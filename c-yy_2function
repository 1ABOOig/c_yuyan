#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>


//传值不会改变实参的值
//传址才会真正改变实参的值

////链式访问  4321  打印的字符个数
//int main()
//{
//	printf("%d", printf("%d", printf("%d", 43)));
//	return 0;
//}


////函数 自加一
//void add(int* p)
//{
//	(*p)++; //++的优先级比*高  所以（*p）
//}
//int main()
//{
//	int num = 0;
//	add(&num);
//	printf("num=%d\n", num);
//	add(&num);
//	printf("num=%d\n", num);
//	add(&num);
//	printf("num=%d\n", num);
//
//	return 0;
//}


////二分查找
////如果找到了返回这个数的下标，找不到返回-1；
////用函数形式
//int binary_search(int arr[], int b,int sz)
//{
//		int left = 0;
//	int right = sz - 1;
//	while (left<=right)
//	{
//		int m = (left + right) / 2;
//	
//		if (arr[m] > b)
//		{
//			right =right -1;
//		}
//		else if (arr[m] < b)
//		{
//			left = left+1;
//		}
//		else
//		{
//			return m;
//			
//		}
//	}
//	return -1;
//
//}
//int main()
//{
//	
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int k = 7;
//	int ret=binary_search(arr, k,sz);
//	//arr传到形参是首元素地址
//	if (ret == -1)
//	{
//		printf("找不到\n");
//	}
//	else
//	{
//		printf("找到了，下标是%d\n", ret);
//	}
//	return 0;
//}


//用函数打印闰年
//int is_leep_year(int n)
//{
//	if ((n % 4 == 0 && n % 100!=0)||(n%400==0))
//	
//		return 1;
//	else
//	return 0;
//}
//
//int main()
//{
//	int year = 0;
//	for (year = 1000; year <= 2000; year++)
//	{
//		if (is_leep_year(year) == 1)
//		{
//			printf("%d ", year);
//		}
//	}
//	return 0;
//}


////是素数返回1，不是返回0
//int is_prime(int n)
//{
//	int j = 0;
//	for (j = 2; j < n; j++)
//	{
//		if (n%j == 0)
//			return 0;
//	}
//	return 1;
//}
//int main()
//{
//	int i = 0;
//	for (i = 100; i < 200; i++)
//	{
//		if (is_prime(i) == 1)
//			printf("%d ", i);
//
//	}
//}

////交换a和b
//void swap1(int x, int y)
//{
//	int tmp = 0;
//	tmp = x;
//	x = y;
//	y = tmp;
//}
//void swap(int* pa, int* pb)
//{
//	int temp = 0;
//	temp = *pa;
//	*pa = *pb;
//	*pb = temp;
//}
//int main()
//{
//	int a = 10;
//	int b=20;
//	swap1(a, b);
//	printf("%d %d\n", a, b);
//
//	swap(&a, &b);
//	printf("%d %d\n", a,b);
//	return 0;
//}
//
